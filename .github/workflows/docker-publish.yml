name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$latest_tag" ]; then
            echo "tag=0.0.1" >> $GITHUB_ENV
          else
            # Auto-increment patch version (e.g., v1.0.0 -> v1.0.1)
            IFS='.' read -r major minor patch <<< "${latest_tag#v}"
            new_tag="v$major.$minor.$((patch + 1))"
            echo "tag=$new_tag" >> $GITHUB_ENV
          fi
      
      # Create and push new Git tag
      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git tag ${{ env.tag }}
          git push origin ${{ env.tag }}

      # Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Use your .NET version

      # Build the application
      - name: Build .NET app
        run: dotnet publish -c Release -o out

      # Set up Docker Buildx (for building multi-platform images if needed)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ env.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true